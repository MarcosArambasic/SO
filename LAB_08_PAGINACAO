#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define TAM_FRAME 4096      // TAMANHO DE CADA PÁGINA/FRAME: 4KB
#define NUM_FRAMES 8        // NÚMERO DE FRAMES NA MEMÓRIA FÍSICA
#define NUM_PAGINAS 16      // NÚMERO DE PÁGINAS NA MEMÓRIA VIRTUAL

// ESTRUTURA QUE REPRESENTA UMA ENTRADA NA TABELA DE PÁGINAS
typedef struct {
    int pagina_id;          // ID DA PÁGINA VIRTUAL
    int frame_id;           // ID DO FRAME FÍSICO CORRESPONDENTE
    bool valido;            // INDICA SE O MAPEAMENTO É VÁLIDO
} EntradaTabelaPagina;

// ESTRUTURA PARA GERENCIAR A TABELA DE PÁGINAS DE UM PROCESSO
typedef struct {
    int processo_id;                      // ID DO PROCESSO
    EntradaTabelaPagina *entradas;        // ARRAY DE ENTRADAS NA TABELA DE PÁGINAS
    int num_paginas;                      // NÚMERO DE PÁGINAS MAPEADAS PARA O PROCESSO
} TabelaPagina;

// ESTRUTURA QUE REPRESENTA UM PROCESSO COM ENDEREÇOS VIRTUAIS PARA ACESSAR
typedef struct {
    int pid;                // ID DO PROCESSO
    int *enderecos;         // ARRAY DE ENDEREÇOS VIRTUAIS A SEREM ACESSADOS
    int num_enderecos;      // QUANTIDADE DE ENDEREÇOS A SEREM ACESSADOS
    int tamanho_processo;   // TAMANHO TOTAL DO PROCESSO EM BYTES
} Processo;

// FUNÇÃO PARA INICIALIZAR A TABELA DE PÁGINAS DE UM PROCESSO
TabelaPagina* inicializar_tabela_paginas(int processo_id, int num_paginas) {
    TabelaPagina *tabela = (TabelaPagina*)malloc(sizeof(TabelaPagina));
    tabela->processo_id = processo_id;
    tabela->num_paginas = num_paginas;
    tabela->entradas = (EntradaTabelaPagina*)malloc(num_paginas * sizeof(EntradaTabelaPagina));

    for (int i = 0; i < num_paginas; i++) {
        tabela->entradas[i].pagina_id = i;
        tabela->entradas[i].frame_id = -1; // Inicializa como inválido
        tabela->entradas[i].valido = false;
    }
    return tabela;
}

// FUNÇÃO PARA ASSOCIAR UMA PÁGINA A UM FRAME
int alocar_pagina_para_frame(TabelaPagina *tabela, int pagina_id, int frame_id) {
    if (pagina_id >= tabela->num_paginas) {
        fprintf(stderr, "Erro: Número de página inválido.\n");
        return -1;
    }

    tabela->entradas[pagina_id].frame_id = frame_id;
    tabela->entradas[pagina_id].valido = true;

    return frame_id;
}

// FUNÇÃO PARA TRADUZIR UM ENDEREÇO VIRTUAL EM UM ENDEREÇO FÍSICO
int traduzir_endereco_virtual(TabelaPagina *tabela, int endereco_virtual) {
    int num_pagina = endereco_virtual / TAM_FRAME;       // NÚMERO DA PÁGINA
    int offset = endereco_virtual % TAM_FRAME;           // OFFSET

    if (num_pagina >= tabela->num_paginas || !tabela->entradas[num_pagina].valido) {
        fprintf(stderr, "Erro: Falta de página ou página inválida!\n");
        return -1;
    }

    int frame_id = tabela->entradas[num_pagina].frame_id;
    return (frame_id * TAM_FRAME) + offset;              // ENDEREÇO FÍSICO
}

// FUNÇÃO PRINCIPAL DE TESTE
int main() {
    // INICIALIZAR A TABELA DE PÁGINAS PARA O PROCESSO 1
    TabelaPagina *tabela_processo1 = inicializar_tabela_paginas(1, NUM_PAGINAS);

    // DEFINIR ENDEREÇOS VIRTUAIS A SEREM ACESSADOS PELO PROCESSO 1
    int enderecos_processo1[] = {0, 5000, 8192, 12288, 16384};
    Processo processo1 = {1, enderecos_processo1, 5, 20000}; // Processo com 5 endereços e 20KB de tamanho

    // ALOCAR PÁGINAS PARA FRAMES NA TABELA DE PÁGINAS DO PROCESSO 1
    alocar_pagina_para_frame(tabela_processo1, 0, 2);  // PÁGINA 0 -> FRAME 2
    alocar_pagina_para_frame(tabela_processo1, 1, 5);  // PÁGINA 1 -> FRAME 5
    alocar_pagina_para_frame(tabela_processo1, 2, 1);  // PÁGINA 2 -> FRAME 1
    alocar_pagina_para_frame(tabela_processo1, 3, 6);  // PÁGINA 3 -> FRAME 6

    // TRADUZIR ENDEREÇOS VIRTUAIS PARA FÍSICOS E IMPRIMIR RESULTADOS
    printf("Tradução de endereços virtuais para processo %d:\n", processo1.pid);
    for (int i = 0; i < processo1.num_enderecos; i++) {
        int endereco_virtual = processo1.enderecos[i];
        int endereco_fisico = traduzir_endereco_virtual(tabela_processo1, endereco_virtual);
        
        if (endereco_fisico != -1) {
            printf("Endereço virtual %d -> Endereço físico %d\n", endereco_virtual, endereco_fisico);
        }
    }

    // LIBERAR MEMÓRIA
    free(tabela_processo1->entradas);
    free(tabela_processo1);

    return 0;
}
